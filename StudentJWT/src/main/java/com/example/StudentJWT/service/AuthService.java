package com.example.StudentJWT.service;

import com.example.StudentJWT.dto.AuthResponse;
import com.example.StudentJWT.dto.LoginRequest;
import com.example.StudentJWT.dto.RegisterRequest;
import com.example.StudentJWT.repository.StudentRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final StudentRepository repository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;


    //Receive Request → Save User → Create Token → Send Back Token

    public AuthResponse register(RegisterRequest request) {
        var student = com.example.StudentJWT.model.Student.builder()  //A method generated by Lombok’s @Builder annotation (most likely).
                // It starts the builder chain for creating a Student.
                .name(request.getName())
                .email(request.getEmail())
                .password(passwordEncoder.encode(request.getPassword())) //Uses passwordEncoder.encode(...) to hash it before saving (important for security)
                .build();
        repository.save(student); //saved in DB

        var jwtToken = jwtService.generateToken(student);//Generates token for the received student using JwtService

        return AuthResponse.builder()//Starts building an AuthResponse object (again using Lombok @Builder).

                .token(jwtToken)//Sets the token field of AuthResponse with the JWT generated above.

                .build();//Finalizes the AuthResponse object creation.
    }


    public AuthResponse login(LoginRequest request) {
        authenticationManager.authenticate(        //This is Spring Security’s way of checking if the login credentials are correct.
                new UsernamePasswordAuthenticationToken(           //is just a Spring object that holds the login email + password.
                        request.getEmail(),
                        request.getPassword()
                )
        );
        // If the above line does not throw an exception, the user is authenticated
        var student = repository.findByEmail(request.getEmail())     //looks up the student in DB.
                .orElseThrow(); // Should not happen if authentication is successful
        var jwtToken = jwtService.generateToken(student);
        return AuthResponse.builder()    //same as above
                .token(jwtToken)
                .build();
    }
}